#0 Inicio

py -m venv virtual

virtual\Scripts\activate

si da error usar el comando en la consola windows powershell abierta como administrador

set-executionpolicy remotesigned

pip install django

pip install pillow

pip install django-countries
pip install six

pip freeze > requirements.txt


#1 Crear proyecto con

django-admin startproject nombre .
                          nucleo

py manage.py startapp nombre
                      tienda

En settings.py agregar el nombre de la app creada

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'tienda',
]


#2 Crear base de datos en tienda\models.py

from django.db import models
from django.contrib.auth.models import User

class Categoria(models.Model):
  nombre = models.CharField(max_length=255, db_index=True)
  slug = models.SlugField(max_length=255, unique=True)

  class Meta:
    verbose_name_plural = 'categorias'

  def __str__(self):
    return self.name

class Producto(models.Model):
  categoria = models.ForeignKey(Categoria, related_name='producto', on_delete=models.CASCADE)
  creado_por = models.ForeignKey(User, on_delete=models.CASCADE, related_name='producto_creador')
  titulo = models.CharField(max_length=255)
  autor = models.CharField(max_length=255, default='admin')
  descripcion = models.TextField(blank=True)
  imagen = models.ImageField(upload_to='images/')
  slug = models.SlugField(max_length=255)
  precio = models.DecimalField(max_digits=4, decimal_places=2)
  en_stock = models.BooleanField(default=True)
  activo = models.BooleanField(default=True)
  creado = models.DateTimeField(auto_now_add=True)
  actualizado = models.DateTimeField(auto_now=True)

  class Meta:
    verbose_name_plural = 'productos'
    ordering = ('-creado',)

  def __str__(self):
    return self.titulo


#3 Crear carpeta media en la raiz y configurarla en nucleo\settings.py

import os

STATIC_URL = 'static/'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')


4# En nucleo\urls.py agregar

from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


5# En tienda\admin.py agregar

from django.contrib import admin
from .models import Categoria, Producto

@admin.register(Categoria)
class CategoriaAdmin(admin.ModelAdmin):
  lista_display = ['nombre', 'slug']
  prepopulated_fields = {'slug': ('nombre',)}
  # el campo slug se completa automaticamente de nombre

@admin.register(Producto)
class ProductoAdmin(admin.ModelAdmin):
  list_display = ['titulo', 'autor', 'slug', 'precio', 'en_stock', 'creado', 'actualizado']
  list_filter = ['en_stock', 'activo']
  list_editable = ['precio', 'en_stock']
  prepopulated_fields = {'slug': ('titulo',)}
  # el campo slug se completa automaticamente de titulo

# Respetar los nombres en ingles de las variables o no los reconoce


6# Crear usuario admin con el comando

py manage.py createsuperuser

cristian - 1234


7# En nucleo/urls.py agregar 

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('tienda.urls', namespace='tienda')),
]

crear archivo urls.py dentro de tienda y agregar

from django.urls import path
from . import views

app_name = 'tienda' # Respetar nombre en ingles de la variable

urlpatterns = [
    path('', views.all_productos, name='all_productos'),
]


8# En tienda/views.py agregar

from django.shortcuts import render
from .models import Categoria, Producto

def all_productos(request):
  productos = Producto.objects.all() # Toma todos los productos de la base de datos
  return render(request, 'tienda/home.html', {'productos': productos})


9# Crear carpeta templates/tienda/home.html

configurar templates en nucleo/settings.py

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


10# Dentro de la carpeta templates/tienda crear base.html y agregar

{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <title> {% block titulo %} Mi tienda {% endblock %} </title>

</head>
<body>
  
  <div id="content"> {% block contenido %} {% endblock %}</div>

</body>
</html>

En el archivo home.html agregar 

{% extends "./base.html" %}
{% load static %}
{% block title %} Home {% endblock %}

{% block contenido %}
  ejemplo de contenido
{% endblock %}


11# En settings.py agregar

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'tienda.views.categorias', # se hace referencia a la funcion dentro de views
            ],
        },
    },
]


12# En views.py crear la siguiente funcion

def categorias(request):
  return{
    'categorias': Categoria.objects.all()
  }

# Al hacer la referencia dentro de settings.py y declarar la funcion en views.py se puede llamar desde base.html

  {% for c in categorias %}
    <li><a class="dropdown-item" href="#">{{c.nombre}}</a></li>
  {% endfor %}

